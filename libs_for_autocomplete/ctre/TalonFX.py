from .BaseTalon import BaseTalon


class TalonFX(BaseTalon):
    """ CTRE Talon FX Motor Controller when used on CAN Bus. """

    def configAllSettings(self, allConfigs, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        configAllSettings(self: ctre._ctre.TalonFX, allConfigs: ctre._ctre.TalonFXConfiguration, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Configures all persistent settings.
        
        :param allConfigs: Object with all of the persistant settings
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configGetMotorCommutation(self, motorCommutation, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configGetMotorCommutation(self: ctre._ctre.TalonFX, motorCommutation: ctre._ctre.MotorCommutation, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                 success and report an error if it times out.
        
        :returns: The motor commutation type.
        """
        pass

    def configGetStatorCurrentLimit(self, currLimitConfigsToFill,
                                    timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        configGetStatorCurrentLimit(self: ctre._ctre.TalonFX, currLimitConfigsToFill: ctre._ctre.StatorCurrentLimitConfiguration, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Gets the stator (output) current limit configuration.
        
        :param currLimitConfigsToFill: Configuration object to fill with read values.
        
        :param timeoutMs:     Timeout value in ms. If nonzero, function will wait for
                              config success and report an error if it times out.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configGetSupplyCurrentLimit(self, currLimitConfigsToFill,
                                    timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        configGetSupplyCurrentLimit(self: ctre._ctre.TalonFX, currLimitConfigsToFill: ctre._ctre.SupplyCurrentLimitConfiguration, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Gets the supply current limit configuration.
        
        :param currLimitConfigsToFill: Configuration object to fill with read values.
        
        :param timeoutMs:     Timeout value in ms. If nonzero, function will wait for
                              config success and report an error if it times out.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configIntegratedSensorAbsoluteRange(self, absoluteSensorRange,
                                            timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configIntegratedSensorAbsoluteRange(self: ctre._ctre.TalonFX, absoluteSensorRange: ctre._ctre.AbsoluteSensorRange, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the signage and range of the "Absolute Position" signal.
        Choose unsigned for an absolute range of [0,+1) rotations, [0,360) deg, etc...
        Choose signed for an absolute range of [-0.5,+0.5) rotations, [-180,+180) deg, etc...
        
        :param absoluteSensorRange: Desired Sign/Range for the absolute position register.
        
        :param timeoutMs:  Timeout value in ms. If nonzero, function will wait for
                           config success and report an error if it times out.
                           If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configIntegratedSensorInitializationStrategy(self, initializationStrategy,
                                                     timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configIntegratedSensorInitializationStrategy(self: ctre._ctre.TalonFX, initializationStrategy: ctre._ctre.SensorInitializationStrategy, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Pick the strategy on how to initialize the integrated sensor absolute position register.  Depending on the mechanism,
        it may be desirable to auto set the Position register to match the Absolute Position (swerve for example).
        Or it may be desired to zero the sensor on boot (drivetrain translation sensor or a relative servo).
        
        TIP: Tuner's self-test feature will report what the boot sensor value will be in the event the product is reset.
        
        :param initializationStrategy: The sensor initialization strategy to use.  This will impact the behavior the next time product boots up.
        
        :param timeoutMs:     Timeout value in ms. If nonzero, function will wait for
                              config success and report an error if it times out.
                              If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configIntegratedSensorOffset(self, offsetDegrees, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configIntegratedSensorOffset(self: ctre._ctre.TalonFX, offsetDegrees: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Adjusts the zero point for the absolute position register.
        The absolute position of the sensor will always have a discontinuity (360 -> 0 deg) or (+180 -> -180)
        and a hard-limited mechanism may have such a discontinuity in its functional range.
        In which case use this config to move the discontinuity outside of the function range.
        
        :param offsetDegrees: Offset in degrees (unit string and coefficient DO NOT apply for this config).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                     config success and report an error if it times out.
                     If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configMotorCommutation(self, motorCommutation, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configMotorCommutation(self: ctre._ctre.TalonFX, motorCommutation: ctre._ctre.MotorCommutation, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configure the motor commutation type.
        
        :param motorCommutation: Motor Commutation Type.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                        success and report an error if it times out. If zero, no
                        blocking or checking is performed.
        """
        pass

    def configSelectedFeedbackSensor(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        configSelectedFeedbackSensor(*args, **kwargs)
        Overloaded function.
        
        1. configSelectedFeedbackSensor(self: ctre._ctre.TalonFX, feedbackDevice: ctre._ctre.TalonFXFeedbackDevice, pidIdx: int = 0, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Select the feedback device for the motor controller.
        
        :param feedbackDevice: Talon FX Feedback Device to select.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                      config success and report an error if it times out.
                      If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        
        2. configSelectedFeedbackSensor(self: ctre._ctre.TalonFX, feedbackDevice: ctre._ctre.FeedbackDevice, pidIdx: int = 0, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        3. configSelectedFeedbackSensor(self: ctre._ctre.TalonFX, feedbackDevice: ctre._ctre.RemoteFeedbackDevice, pidIdx: int = 0, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        """
        pass

    def configStatorCurrentLimit(self, currLimitConfigs, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        configStatorCurrentLimit(self: ctre._ctre.TalonFX, currLimitConfigs: ctre._ctre.StatorCurrentLimitConfiguration, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Configures the stator (output) current limit.
        
        :param currLimitCfg: Current limit configuration
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                    config success and report an error if it times out.
                    If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSupplyCurrentLimit(self, currLimitConfigs, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        configSupplyCurrentLimit(self: ctre._ctre.TalonFX, currLimitConfigs: ctre._ctre.SupplyCurrentLimitConfiguration, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Configures the supply-side current limit.
        
        :param currLimitCfg: Current limit configuration
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                    config success and report an error if it times out.
                    If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configurePID(self, pid, pidIdx=0, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        configurePID(self: ctre._ctre.TalonFX, pid: ctre._ctre.TalonFXPIDSetConfiguration, pidIdx: int = 0, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Sets all PID persistant settings.
        
        :param pid: Object with all of the PID set persistant settings
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        """
        pass

    def getAllConfigs(self, allConfigs, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        getAllConfigs(self: ctre._ctre.TalonFX, allConfigs: ctre._ctre.TalonFXConfiguration, timeoutMs: int = 50) -> None
        
        Gets all persistant settings.
        
        :param allConfigs: Object with all of the persistant settings
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        """
        pass

    def getPIDConfigs(self, pid, pidIdx=0, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        getPIDConfigs(self: ctre._ctre.TalonFX, pid: ctre._ctre.TalonFXPIDSetConfiguration, pidIdx: int = 0, timeoutMs: int = 50) -> None
        
        Gets all PID set persistant settings.
        
        :param pid: Object with all of the PID set persistant settings
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        """
        pass

    def getSensorCollection(self):  # real signature unknown; restored from __doc__
        """
        getSensorCollection(self: ctre._ctre.TalonFX) -> ctre._ctre.TalonFXSensorCollection
        
        
        
        :returns: object that can get/set individual RAW sensor values.
        """
        pass

    def set(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        set(*args, **kwargs)
        Overloaded function.
        
        1. set(self: ctre._ctre.TalonFX, mode: ctre._ctre.TalonFXControlMode, value: float) -> None
        
        Sets the appropriate output on the talon, depending on the mode.
        
        :param mode: The output mode to apply.
             In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped.
             In Current mode, output value is in amperes.
             In Velocity mode, output value is in position change / 100ms.
             In Position mode, output value is in encoder ticks or an analog value,
             depending on the sensor.
             In Follower mode, the output value is the integer device ID of the talon to
             duplicate.
        
        :param value: The setpoint value, as described above.
        
        
             Standard Driving Example:
             _talonLeft.set(ControlMode.PercentOutput, leftJoy);
             _talonRght.set(ControlMode.PercentOutput, rghtJoy);
        
        2. set(self: ctre._ctre.TalonFX, mode: ctre._ctre.TalonFXControlMode, demand0: float, demand1Type: ctre._ctre.DemandType, demand1: float) -> None
        
        
        
        :param mode: Sets the appropriate output on the talon, depending on the mode.
        
        :param demand0: The output value to apply.
                   such as advanced feed forward and/or auxiliary close-looping in firmware.
                   In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped.
                   In Current mode, output value is in amperes.
                   In Velocity mode, output value is in position change / 100ms.
                   In Position mode, output value is in encoder ticks or an analog value,
                   depending on the sensor. See
                   In Follower mode, the output value is the integer device ID of the talon to
                   duplicate.
        
        :param demand1Type: The demand type for demand1.
                   Neutral: Ignore demand1 and apply no change to the demand0 output.
                   AuxPID: Use demand1 to set the target for the auxiliary PID 1.  Auxiliary
                   PID is always executed as standard Position PID control.
                   ArbitraryFeedForward: Use demand1 as an arbitrary additive value to the
                   demand0 output.  In PercentOutput the demand0 output is the motor output,
                   and in closed-loop modes the demand0 output is the output of PID0.
        
        :param demand1: Supplmental output value.
                   AuxPID: Target position in Sensor Units
                   ArbitraryFeedForward: Percent Output between -1.0 and 1.0
        
        
                   Arcade Drive Example:
                   _talonLeft.set(ControlMode.PercentOutput, joyForward, DemandType.ArbitraryFeedForward, +joyTurn);
                   _talonRght.set(ControlMode.PercentOutput, joyForward, DemandType.ArbitraryFeedForward, -joyTurn);
        
                   Drive Straight Example:
                   Note: Selected Sensor Configuration is necessary for both PID0 and PID1.
                   _talonLeft.follow(_talonRght, FollwerType.AuxOutput1);
                   _talonRght.set(ControlMode.PercentOutput, joyForward, DemandType.AuxPID, desiredRobotHeading);
        
                   Drive Straight to a Distance Example:
                   Note: Other configurations (sensor selection, PID gains, etc.) need to be set.
                   _talonLeft.follow(_talonRght, FollwerType.AuxOutput1);
                   _talonRght.set(ControlMode.MotionMagic, targetDistance, DemandType.AuxPID, desiredRobotHeading);
        
        3. set(self: ctre._ctre.TalonFX, mode: ctre._ctre.ControlMode, value: float) -> None
        
        4. set(self: ctre._ctre.TalonFX, mode: ctre._ctre.ControlMode, demand0: float, demand1Type: ctre._ctre.DemandType, demand1: float) -> None
        """
        pass

    def setInverted(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        setInverted(*args, **kwargs)
        Overloaded function.
        
        1. setInverted(self: ctre._ctre.TalonFX, invertType: ctre._ctre.TalonFXInvertType) -> None
        
        Inverts the hbridge output of the motor controller in relation to the master if present
        
        This does not impact sensor phase and should not be used to correct sensor polarity.
        
        This will allow you to either:
        - Not invert the motor
        - Invert the motor
        - Always follow the master regardless of master's inversion
        - Always oppose the master regardless of master's inversion
        
        :param invertType: Invert state to set.
        
        2. setInverted(self: ctre._ctre.TalonFX, invertType: ctre._ctre.InvertType) -> None
        
        3. setInverted(self: ctre._ctre.TalonFX, bInvert: bool) -> None
        """
        pass

    def __init__(self, deviceNumber):  # real signature unknown; restored from __doc__
        """
        __init__(self: ctre._ctre.TalonFX, deviceNumber: int) -> None
        
        Constructor for a Talon
        
        :param deviceNumber: CAN Device ID of TalonFX
        """
        pass
