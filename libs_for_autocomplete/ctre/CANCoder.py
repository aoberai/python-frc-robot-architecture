from .CANBusAddressable import CANBusAddressable


class CANCoder(CANBusAddressable):
    """
    CTRE CANCoder
    
    Device for interfacing common devices to the CAN bus.
    """

    def clearStickyFaults(self, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        clearStickyFaults(self: ctre._ctre.CANCoder, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Clears the Sticky Faults
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configAbsoluteSensorRange(self, absoluteSensorRange,
                                  timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configAbsoluteSensorRange(self: ctre._ctre.CANCoder, absoluteSensorRange: ctre._ctre.AbsoluteSensorRange, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the signage and range of the "Absolute Position" signal.
        Choose unsigned for an absolute range of [0,+1) rotations, [0,360) deg, etc...
        Choose signed for an absolute range of [-0.5,+0.5) rotations, [-180,+180) deg, etc...
        
        :param absoluteSensorRange: Desired Sign/Range for the absolute position register.
        
        :param timeoutMs:  Timeout value in ms. If nonzero, function will wait for
                           config success and report an error if it times out.
                           If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configAllSettings(self, allConfigs, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        configAllSettings(self: ctre._ctre.CANCoder, allConfigs: ctre._ctre.CANCoderConfiguration, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Configures all persistent settings.
        
        :param allConfigs: Object with all of the persistant settings
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configFactoryDefault(self, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        configFactoryDefault(self: ctre._ctre.CANCoder, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Configures all persistent settings to defaults (overloaded so timeoutMs is 50 ms).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configFeedbackCoefficient(self, sensorCoefficient, unitString, sensortimeBase,
                                  timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configFeedbackCoefficient(self: ctre._ctre.CANCoder, sensorCoefficient: float, unitString: str, sensortimeBase: ctre._ctre.SensorTimeBase, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Choose what units you want the API to get/set.  This also impacts the units displayed in Self-Test in Tuner.
        Depending on your mechanism, you may want to scale rotational units (deg, radians, rotations), or scale to a distance (inches, centimeters).
        
        :param sensorCoefficient: Scalar to multiply the CANCoder's native 12-bit resolute sensor. Defaults to 0.087890625 to produce degrees.
        
        :param unitString: String holding the unit to report in.  This impacts all routines (except for ConfigMagnetOffset) and the self-test in Tuner.
                         The string value itself is arbitrary.  The max number of letters will depend on firmware versioning, but generally CANCoder
                         supports up to eight letters.  However, common units such as "centimeters" are supported explicitly despite exceeding the eight-letter limit.
                         Default is "deg"
        
        :param sensortimeBase: Desired denominator to report velocity in.  This impacts GetVelocity and the reported velocity in self-test in Tuner.
                         Default is "Per Second".
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                         config success and report an error if it times out.
                         If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configGetCustomParam(self, paramIndex, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configGetCustomParam(self: ctre._ctre.CANCoder, paramIndex: int, timeoutMs: int = 0) -> int
        
        Gets the value of a custom parameter. This is for arbitrary use.
        
        Sometimes it is necessary to save calibration/duty cycle/output
        information in the device. Particularly if the
        device is part of a subsystem that can be replaced.
        
        :param paramIndex: Index of custom parameter. [0-1]
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Value of the custom param.
        """
        return 0

    def configGetParameter(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        configGetParameter(*args, **kwargs)
        Overloaded function.
        
        1. configGetParameter(self: ctre._ctre.CANCoder, param: ctre._ctre.ParamEnum, ordinal: int, timeoutMs: int = 0) -> float
        
        Gets a parameter. Generally this is not used.
        This can be utilized in
        - Using new features without updating API installation.
        - Errata workarounds to circumvent API implementation.
        - Allows for rapid testing / unit testing of firmware.
        
        :param param: Parameter enumeration.
        
        :param ordinal: Ordinal of parameter.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Value of parameter.
        
        2. configGetParameter(self: ctre._ctre.CANCoder, param: ctre._ctre.ParamEnum, valueToSend: int, valueReceived: int, subValue: int, ordinal: int, timeoutMs: int) -> ctre._ctre.ErrorCode
        
        Gets a parameter by passing an int by reference
        
        :param param: Parameter enumeration
        
        :param valueToSend: Value to send to parameter
        
        :param valueReceived: Reference to integer to receive
        
        :param subValue: SubValue of parameter
        
        :param ordinal: Ordinal of parameter
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                     config success and report an error if it times out.
                     If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configMagnetOffset(self, offsetDegrees, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configMagnetOffset(self: ctre._ctre.CANCoder, offsetDegrees: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Adjusts the zero point for the absolute position register.
        The absolute position of the sensor will always have a discontinuity (360 -> 0 deg) or (+180 -> -180)
        and a hard-limited mechanism may have such a discontinuity in its functional range.
        In which case use this config to move the discontinuity outside of the function range.
        
        :param offsetDegrees: Offset in degrees (unit string and coefficient DO NOT apply for this config).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                     config success and report an error if it times out.
                     If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSensorDirection(self, bSensorDirection, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configSensorDirection(self: ctre._ctre.CANCoder, bSensorDirection: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Choose which direction is interpreted as positive displacement.
        This affects both "Position" and "Absolute Position".
        
        :param bSensorDirection: False (default) means positive rotation occurs when magnet
                        is spun counter-clockwise when observer is facing the LED side of CANCoder.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSensorInitializationStrategy(self, initializationStrategy,
                                           timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configSensorInitializationStrategy(self: ctre._ctre.CANCoder, initializationStrategy: ctre._ctre.SensorInitializationStrategy, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Pick the strategy on how to initialize the CANCoder's "Position" register.  Depending on the mechanism,
        it may be desirable to auto set the Position register to match the Absolute Position (swerve for example).
        Or it may be desired to zero the sensor on boot (drivetrain translation sensor or a relative servo).
        
        TIP: Tuner's self-test feature will report what the boot sensor value will be in the event the CANCoder is reset.
        
        :param initializationStrategy: The sensor initialization strategy to use.  This will impact the behavior the next time CANCoder boots up.
        
        :param timeoutMs:     Timeout value in ms. If nonzero, function will wait for
                              config success and report an error if it times out.
                              If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSetCustomParam(self, newValue, paramIndex, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configSetCustomParam(self: ctre._ctre.CANCoder, newValue: int, paramIndex: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the value of a custom parameter. This is for arbitrary use.
        
        Sometimes it is necessary to save calibration/duty cycle/output
        information in the device. Particularly if the
        device is part of a subsystem that can be replaced.
        
        :param newValue: Value for custom parameter.
        
        :param paramIndex: Index of custom parameter. [0-1]
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSetParameter(self, param, value, subValue, ordinal,
                           timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configSetParameter(self: ctre._ctre.CANCoder, param: ctre._ctre.ParamEnum, value: float, subValue: int, ordinal: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets a parameter. Generally this is not used.
        This can be utilized in
        - Using new features without updating API installation.
        - Errata workarounds to circumvent API implementation.
        - Allows for rapid testing / unit testing of firmware.
        
        :param param: Parameter enumeration.
        
        :param value: Value of parameter.
        
        :param subValue: Subvalue for parameter. Maximum value of 255.
        
        :param ordinal: Ordinal of parameter.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configVelocityMeasurementPeriod(self, period, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configVelocityMeasurementPeriod(self: ctre._ctre.CANCoder, period: ctre._ctre.SensorVelocityMeasPeriod, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the period of each velocity sample.
        Every 1ms a position value is sampled, and the delta between that sample
        and the position sampled kPeriod ms ago is inserted into a filter.
        kPeriod is configured with this function.
        
        :param period: Desired period for the velocity measurement.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configVelocityMeasurementWindow(self, windowSize, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configVelocityMeasurementWindow(self: ctre._ctre.CANCoder, windowSize: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the number of velocity samples used in the rolling average velocity
        measurement.
        
        :param windowSize: Number of samples in the rolling average of velocity
                  measurement. Valid values are 1,2,4,8,16,32. If another
                  value is specified, it will truncate to nearest support value.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def destroyAllCANCoders(self):  # real signature unknown; restored from __doc__
        """
        destroyAllCANCoders() -> None
        
        Destructs all CANCoder objects
        """
        pass

    def getAbsolutePosition(self):  # real signature unknown; restored from __doc__
        """
        getAbsolutePosition(self: ctre._ctre.CANCoder) -> float
        
        Gets the absolute position of the sensor.
        The absolute position may be unsigned (for example: [0,360) deg), or signed (for example: [-180,+180) deg).  This is determined by a configuration.  The default selection is unsigned.
        The units are determined by the coefficient and unit-string configuration params, default is degrees.
        Note: this signal is not affected by calls to SetPosition().
        
        :returns: The position of the sensor.
        """
        return 0.0

    def getAllConfigs(self, allConfigs, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        getAllConfigs(self: ctre._ctre.CANCoder, allConfigs: ctre._ctre.CANCoderConfiguration, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Gets all persistant settings.
        
        :param allConfigs: Object with all of the persistant settings
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def getBusVoltage(self):  # real signature unknown; restored from __doc__
        """
        getBusVoltage(self: ctre._ctre.CANCoder) -> float
        
        Gets the bus voltage seen by the device.
        
        :returns: The bus voltage value (in volts).
        """
        return 0.0

    def getFaults(self, toFill):  # real signature unknown; restored from __doc__
        """
        getFaults(self: ctre._ctre.CANCoder, toFill: ctre._ctre.CANCoderFaults) -> ctre._ctre.ErrorCode
        
        Gets the CANCoder fault status
        
        :param toFill: Container for fault statuses.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def getFirmwareVersion(self):  # real signature unknown; restored from __doc__
        """
        getFirmwareVersion(self: ctre._ctre.CANCoder) -> int
        
        Gets the firmware version of the device.
        
        :returns: Firmware version of device.
        """
        return 0

    def getLastError(self):  # real signature unknown; restored from __doc__
        """
        getLastError(self: ctre._ctre.CANCoder) -> ctre._ctre.ErrorCode
        
        Call GetLastError() generated by this object.
        Not all functions return an error code but can
        potentially report errors.
        
        This function can be used to retrieve those error codes.
        
        :returns: The last ErrorCode generated.
        """
        pass

    def getLastTimestamp(self):  # real signature unknown; restored from __doc__
        """
        getLastTimestamp(self: ctre._ctre.CANCoder) -> float
        
        Get the timestamp of the CAN frame retrieved in the last called get routine.
        """
        return 0.0

    def getLastUnitString(self):  # real signature unknown; restored from __doc__
        """
        getLastUnitString(self: ctre._ctre.CANCoder) -> str
        
        Get the units for the signal retrieved in the last called get routine.
        """
        return ""

    def getMagnetFieldStrength(self):  # real signature unknown; restored from __doc__
        """
        getMagnetFieldStrength(self: ctre._ctre.CANCoder) -> ctre._ctre.MagnetFieldStrength
        
        Gets the magnet's health.
        
        :returns: The magnet health code (red/orange/green).
        """
        pass

    def getPosition(self):  # real signature unknown; restored from __doc__
        """
        getPosition(self: ctre._ctre.CANCoder) -> float
        
        Gets the position of the sensor.  This may be relative or absolute depending on configuration.
        The units are determined by the coefficient and unit-string configuration params, default is degrees.
        
        :returns: The position of the sensor.
        """
        return 0.0

    def getStatusFramePeriod(self, frame, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        getStatusFramePeriod(self: ctre._ctre.CANCoder, frame: ctre._ctre.CANCoderStatusFrame, timeoutMs: int = 0) -> int
        
        Gets the period of the given status frame.
        
        :param frame: Frame to get the period of.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Period of the given status frame.
        """
        return 0

    def getStickyFaults(self, toFill):  # real signature unknown; restored from __doc__
        """
        getStickyFaults(self: ctre._ctre.CANCoder, toFill: ctre._ctre.CANCoderStickyFaults) -> ctre._ctre.ErrorCode
        
        Gets the CANCoder sticky fault status
        
        :param toFill: Container for sticky fault statuses.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def getVelocity(self):  # real signature unknown; restored from __doc__
        """
        getVelocity(self: ctre._ctre.CANCoder) -> float
        
        Sets the position of the sensor.
        The units are determined by the coefficient and unit-string configuration params, default is degrees.
        
        :param newPosition: 
        
        :returns: ErrorCode generated by function. 0 indicates no error.
        """
        return 0.0

    def hasResetOccurred(self):  # real signature unknown; restored from __doc__
        """
        hasResetOccurred(self: ctre._ctre.CANCoder) -> bool
        
        Returns true if the device has reset since last call.
        
        :returns: Has a Device Reset Occurred?
        """
        return False

    def setPosition(self, newPosition, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        setPosition(self: ctre._ctre.CANCoder, newPosition: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the position of the sensor.
        The units are determined by the coefficient and unit-string configuration params, default is degrees.
        
        :param newPosition: 
        
        :returns: ErrorCode generated by function. 0 indicates no error.
        """
        pass

    def setPositionToAbsolute(self, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        setPositionToAbsolute(self: ctre._ctre.CANCoder, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the position of the sensor to match the magnet's "Absolute Sensor".
        The units are determined by the coefficient and unit-string configuration params, default is degrees.
        
        :returns: ErrorCode generated by function. 0 indicates no error.
        """
        pass

    def setStatusFramePeriod(self, statusFrame, periodMs, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        setStatusFramePeriod(self: ctre._ctre.CANCoder, statusFrame: ctre._ctre.CANCoderStatusFrame, periodMs: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the period of the given status frame.
        
        :param statusFrame: Frame whose period is to be changed.
        
        :param periodMs: Period in ms for the given frame.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                   config success and report an error if it times out.
                   If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def __init__(self, deviceNumber):  # real signature unknown; restored from __doc__
        """
        __init__(self: ctre._ctre.CANCoder, deviceNumber: int) -> None
        
        Constructor.
        
        :param deviceNumber: The CAN Device ID of the CANCoder.
        """
        pass
