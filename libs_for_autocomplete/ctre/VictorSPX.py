from codeinternals.ctre import BaseMotorController, IMotorController


class VictorSPX(BaseMotorController, IMotorController):
    """ VEX Victor SPX Motor Controller when used on CAN Bus. """

    def configAllSettings(self, allConfigs, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        configAllSettings(self: ctre._ctre.VictorSPX, allConfigs: ctre._ctre.VictorSPXConfiguration, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Configures all persistent settings.
        
        :param allConfigs: Object with all of the persistant settings
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def getAllConfigs(self, allConfigs, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        getAllConfigs(self: ctre._ctre.VictorSPX, allConfigs: ctre._ctre.VictorSPXConfiguration, timeoutMs: int = 50) -> None
        
        Gets all persistant settings.
        
        :param allConfigs: Object with all of the persistant settings
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        """
        pass

    def getPIDConfigs(self, pid, pidIdx=0, timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        getPIDConfigs(self: ctre._ctre.VictorSPX, pid: ctre._ctre.VictorSPXPIDSetConfiguration, pidIdx: int = 0, timeoutMs: int = 50) -> None
        
        Gets all PID set persistant settings.
        
        :param pid: Object with all of the PID set persistant settings
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        """
        pass

    def set(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        set(*args, **kwargs)
        Overloaded function.
        
        1. set(self: ctre._ctre.VictorSPX, mode: ctre._ctre.VictorSPXControlMode, value: float) -> None
        
        Sets the appropriate output on the motor controller, depending on the mode.
        
        :param mode: The output mode to apply.
             In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped.
             In Velocity mode, output value is in position change / 100ms.
             In Position mode, output value is in encoder ticks or an analog value,
             depending on the sensor.
             In Follower mode, the output value is the integer device ID of the motor controller to
             duplicate.
        
        :param value: The setpoint value, as described above.
        
        
             Standard Driving Example:
             victorLeft.set(ControlMode.PercentOutput, leftJoy);
             victorRght.set(ControlMode.PercentOutput, rghtJoy);
        
        2. set(self: ctre._ctre.VictorSPX, mode: ctre._ctre.VictorSPXControlMode, demand0: float, demand1Type: ctre._ctre.DemandType, demand1: float) -> None
        
        
        
        :param mode: Sets the appropriate output on the motor controller, depending on the mode.
        
        :param demand0: The output value to apply.
                   such as advanced feed forward and/or auxiliary close-looping in firmware.
                   In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped.
                   In Velocity mode, output value is in position change / 100ms.
                   In Position mode, output value is in encoder ticks or an analog value,
                   depending on the sensor. See
                   In Follower mode, the output value is the integer device ID of the motor controller to
                   duplicate.
        
        :param demand1Type: The demand type for demand1.
                   Neutral: Ignore demand1 and apply no change to the demand0 output.
                   AuxPID: Use demand1 to set the target for the auxiliary PID 1.  Auxiliary
                   PID is always executed as standard Position PID control.
                   ArbitraryFeedForward: Use demand1 as an arbitrary additive value to the
                   demand0 output.  In PercentOutput the demand0 output is the motor output,
                   and in closed-loop modes the demand0 output is the output of PID0.
        
        :param demand1: Supplmental output value.
                   AuxPID: Target position in Sensor Units
                   ArbitraryFeedForward: Percent Output between -1.0 and 1.0
        
        
                   Arcade Drive Example:
                   _victorLeft.set(ControlMode.PercentOutput, joyForward, DemandType.ArbitraryFeedForward, +joyTurn);
                   _victorRght.set(ControlMode.PercentOutput, joyForward, DemandType.ArbitraryFeedForward, -joyTurn);
        
                   Drive Straight Example:
                   Note: Selected Sensor Configuration is necessary for both PID0 and PID1.
                   _victorLeft.follow(_victorRght, FollwerType.AuxOutput1);
                   _victorRght.set(ControlMode.PercentOutput, joyForward, DemandType.AuxPID, desiredRobotHeading);
        
                   Drive Straight to a Distance Example:
                   Note: Other configurations (sensor selection, PID gains, etc.) need to be set.
                   _victorLeft.follow(_victorRght, FollwerType.AuxOutput1);
                   _victorRght.set(ControlMode.MotionMagic, targetDistance, DemandType.AuxPID, desiredRobotHeading);
        
        3. set(self: ctre._ctre.VictorSPX, mode: ctre._ctre.ControlMode, value: float) -> None
        
        4. set(self: ctre._ctre.VictorSPX, mode: ctre._ctre.ControlMode, demand0: float, demand1Type: ctre._ctre.DemandType, demand1: float) -> None
        """
        pass

    def __init__(self, deviceNumber):  # real signature unknown; restored from __doc__
        """
        __init__(self: ctre._ctre.VictorSPX, deviceNumber: int) -> None
        
        Constructor
        
        :param deviceNumber: [0,62]
        """
        pass
