# encoding: utf-8
# module ctre._ctre
# from C:\Users\Nolan\Documents\Robotics\python-frc-robot-architecture\venv\lib\site-packages\ctre\_ctre.cp37-win_amd64.pyd
# by generator 1.147
# no doc

# imports

from .IFollower import IFollower


class IMotorController(IFollower):
    """ Interface for motor controllers """

    def changeMotionControlFramePeriod(self, periodMs):  # real signature unknown; restored from __doc__
        """
        changeMotionControlFramePeriod(self: ctre._ctre.IMotorController, periodMs: int) -> ctre._ctre.ErrorCode
        
        Calling application can opt to speed up the handshaking between the robot
        API and the controller to increase the download rate of the controller's Motion
        Profile. Ideally the period should be no more than half the period of a
        trajectory point.
        
        :param periodMs: The transmit period in ms.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def clearMotionProfileHasUnderrun(self, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        clearMotionProfileHasUnderrun(self: ctre._ctre.IMotorController, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Clear the "Has Underrun" flag. Typically this is called after application
        has confirmed an underrun had occured.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                 success and report an error if it times out. If zero, no
                 blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def clearMotionProfileTrajectories(self):  # real signature unknown; restored from __doc__
        """
        clearMotionProfileTrajectories(self: ctre._ctre.IMotorController) -> ctre._ctre.ErrorCode
        
        Clear the buffered motion profile in both controller's RAM (bottom), and in the
        API (top).
        
        :returns: Error Code generated by function. 0 indicates no error
        """
        pass

    def clearStickyFaults(self, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        clearStickyFaults(self: ctre._ctre.IMotorController, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Clears all sticky faults.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                 success and report an error if it times out. If zero, no
                 blocking or checking is performed.
        
        :returns: Last Error Code generated by a function.
        """
        pass

    def configAllowableClosedloopError(self, slotIdx, allowableCloseLoopError,
                                       timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configAllowableClosedloopError(self: ctre._ctre.IMotorController, slotIdx: int, allowableCloseLoopError: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the allowable closed-loop error in the given parameter slot.
        
        :param slotIdx:        Parameter slot for the constant.
        
        :param allowableCloseLoopError: Value of the allowable closed-loop error in sensor units (or sensor units per 100ms for velocity).
        
        :param timeoutMs:      Timeout value in ms. If nonzero, function will wait for
                               config success and report an error if it times out.
                               If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configAuxPIDPolarity(self, invert, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configAuxPIDPolarity(self: ctre._ctre.IMotorController, invert: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the Polarity of the Auxiliary PID (PID1).
        
        Standard Polarity:
        Primary Output = PID0 + PID1,
        Auxiliary Output = PID0 - PID1,
        
        Inverted Polarity:
        Primary Output = PID0 - PID1,
        Auxiliary Output = PID0 + PID1,
        
        :param invert: If true, use inverted PID1 output polarity.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                 success and report an error if it times out. If zero, no
                 blocking or checking is performed.
        
        :returns: Error Code
        """
        pass

    def configClearPositionOnLimitF(self, clearPositionOnLimitF,
                                    timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configClearPositionOnLimitF(self: ctre._ctre.IMotorController, clearPositionOnLimitF: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Enables clearing the position of the feedback sensor when the forward
        limit switch is triggered
        
        :param clearPositionOnLimitF: Whether clearing is enabled, defaults false
        
        :param timeoutMs:    Timeout value in ms. If nonzero, function will wait for
                             config success and report an error if it times out.
                             If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configClearPositionOnLimitR(self, clearPositionOnLimitR,
                                    timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configClearPositionOnLimitR(self: ctre._ctre.IMotorController, clearPositionOnLimitR: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Enables clearing the position of the feedback sensor when the reverse
        limit switch is triggered
        
        :param clearPositionOnLimitR: Whether clearing is enabled, defaults false
        
        :param timeoutMs:    Timeout value in ms. If nonzero, function will wait for
                             config success and report an error if it times out.
                             If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configClearPositionOnQuadIdx(self, clearPositionOnQuadIdx,
                                     timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configClearPositionOnQuadIdx(self: ctre._ctre.IMotorController, clearPositionOnQuadIdx: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Enables clearing the position of the feedback sensor when the quadrature index signal
        is detected
        
        :param clearPositionOnQuadIdx: Whether clearing is enabled, defaults false
        
        :param timeoutMs:     Timeout value in ms. If nonzero, function will wait for
                              config success and report an error if it times out.
                              If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configClosedLoopPeakOutput(self, slotIdx, percentOut,
                                   timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configClosedLoopPeakOutput(self: ctre._ctre.IMotorController, slotIdx: int, percentOut: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the peak closed-loop output.  This peak output is slot-specific and
        is applied to the output of the associated PID loop.
        This setting is seperate from the generic Peak Output setting.
        
        :param slotIdx: Parameter slot for the constant.
        
        :param percentOut: Peak Percent Output from 0 to 1.  This value is absolute and
                  the magnitude will apply in both forward and reverse directions.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configClosedLoopPeriod(self, slotIdx, loopTimeMs, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configClosedLoopPeriod(self: ctre._ctre.IMotorController, slotIdx: int, loopTimeMs: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the loop time (in milliseconds) of the PID closed-loop calculations.
        Default value is 1 ms.
        
        :param slotIdx: Parameter slot for the constant.
        
        :param loopTimeMs: Loop timing of the closed-loop calculations.  Minimum value of
                  1 ms, maximum of 64 ms.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configClosedloopRamp(self, secondsFromNeutralToFull,
                             timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configClosedloopRamp(self: ctre._ctre.IMotorController, secondsFromNeutralToFull: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the closed-loop ramp rate of throttle output.
        
        :param secondsFromNeutralToFull: Minimum desired time to go from neutral to full throttle. A
                                value of '0' will disable the ramp.
        
        :param timeoutMs:       Timeout value in ms. If nonzero, function will wait for
                                config success and report an error if it times out.
                                If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configFactoryDefault(self, timeout):  # real signature unknown; restored from __doc__
        """
        configFactoryDefault(self: ctre._ctre.IMotorController, timeout: int) -> ctre._ctre.ErrorCode
        
        Revert all configurations to factory default values.
        Use this before your individual config* calls to avoid having to config every single param.
        
        Alternatively you can use the configAllSettings routine.
        
        :param timeout: Timeout value in ms. Function will generate error if config is
               not successful within timeout.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configFeedbackNotContinuous(self, feedbackNotContinuous,
                                    timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configFeedbackNotContinuous(self: ctre._ctre.IMotorController, feedbackNotContinuous: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Disables continuous tracking of the position for analog and pulse-width.
        If the signal goes from 4095 to 0 (pulse-width) a motor controller will continue to read 4096 by default.
        If overflow tracking is disabled, it will wrap to 0 (not continuous)
        
        If using pulse-width on CTRE Mag Encoder (within one rotation) or absolute analog sensor (within one rotation),
        setting feedbackNotContinuous to true is recommended, to prevent intermittent
        connections from causing sensor "jumps" of 4096 (or 1024 for analog) units.
        
        :param feedbackNotContinuous: True to disable the overflow tracking.
        
        :param timeoutMs:    Timeout value in ms. If nonzero, function will wait for
                             config success and report an error if it times out.
                             If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configForwardLimitSwitchSource(self, type, normalOpenOrClose, deviceID,
                                       timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configForwardLimitSwitchSource(self: ctre._ctre.IMotorController, type: ctre._ctre.RemoteLimitSwitchSource, normalOpenOrClose: ctre._ctre.LimitSwitchNormal, deviceID: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the forward limit switch for a remote source. For example, a
        CAN motor controller may need to monitor the Limit-F pin of another Talon
        or CANifier.
        
        :param type:     Remote limit switch source. User can choose between a remote
                         Talon SRX, CANifier, or deactivate the feature.
        
        :param normalOpenOrClose: Setting for normally open, normally closed, or disabled. This
                         setting matches the Phoenix Tuner drop down.
        
        :param deviceID: Device ID of remote source (Talon SRX or CANifier device ID).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                         success and report an error if it times out. If zero, no
                         blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configForwardSoftLimitEnable(self, enable, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configForwardSoftLimitEnable(self: ctre._ctre.IMotorController, enable: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the forward soft limit enable.
        
        :param enable: Forward Sensor Position Limit Enable.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configForwardSoftLimitThreshold(self, forwardSensorLimit,
                                        timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configForwardSoftLimitThreshold(self: ctre._ctre.IMotorController, forwardSensorLimit: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the forward soft limit threhold.
        
        :param forwardSensorLimit: Forward Sensor Position Limit (in raw sensor units).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                          config success and report an error if it times out.
                          If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configGetCustomParam(self, paramIndex, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configGetCustomParam(self: ctre._ctre.IMotorController, paramIndex: int, timeoutMs: int = 0) -> int
        
        Gets the value of a custom parameter.
        
        :param paramIndex: Index of custom parameter [0,1].
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                  success and report an error if it times out. If zero, no
                  blocking or checking is performed.
        
        :returns: Value of the custom param.
        """
        return 0

    def configGetParameter(self, paramEnum, ordinal, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configGetParameter(self: ctre._ctre.IMotorController, paramEnum: ctre._ctre.ParamEnum, ordinal: int, timeoutMs: int = 0) -> float
        
        Gets a parameter.
        
        :param paramEnum: Parameter enumeration.
        
        :param ordinal: Ordinal of parameter.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Value of parameter.
        """
        return 0.0

    def configLimitSwitchDisableNeutralOnLOS(self, limitSwitchDisableNeutralOnLOS,
                                             timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configLimitSwitchDisableNeutralOnLOS(self: ctre._ctre.IMotorController, limitSwitchDisableNeutralOnLOS: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Disables limit switches triggering (if enabled) when the sensor is no longer detected.
        
        :param limitSwitchDisableNeutralOnLOS: disable triggering
        
        :param timeoutMs:             Timeout value in ms. If nonzero, function will wait for
                                      config success and report an error if it times out.
                                      If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configMaxIntegralAccumulator(self, slotIdx, iaccum,
                                     timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configMaxIntegralAccumulator(self: ctre._ctre.IMotorController, slotIdx: int, iaccum: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the maximum integral accumulator in the given parameter slot.
        
        :param slotIdx: Parameter slot for the constant.
        
        :param iaccum: Value of the maximum integral accumulator (closed loop error
                 units X 1ms).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                 success and report an error if it times out. If zero, no
                 blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configMotionAcceleration(self, sensorUnitsPer100msPerSec,
                                 timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configMotionAcceleration(self: ctre._ctre.IMotorController, sensorUnitsPer100msPerSec: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the Motion Magic Acceleration. This is the target acceleration that
        the motion magic curve generator can use.
        
        :param sensorUnitsPer100msPerSec: Motion Magic Acceleration (in raw sensor units per 100 ms per
                                 second).
        
        :param timeoutMs:        Timeout value in ms. If nonzero, function will wait for config
                                 success and report an error if it times out. If zero, no
                                 blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configMotionCruiseVelocity(self, sensorUnitsPer100ms,
                                   timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configMotionCruiseVelocity(self: ctre._ctre.IMotorController, sensorUnitsPer100ms: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the Motion Magic Cruise Velocity. This is the peak target velocity
        that the motion magic curve generator can use.
        
        :param sensorUnitsPer100ms: Motion Magic Cruise Velocity (in raw sensor units per 100 ms).
        
        :param timeoutMs:  Timeout value in ms. If nonzero, function will wait for config
                           success and report an error if it times out. If zero, no
                           blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configMotionProfileTrajectoryPeriod(self, baseTrajDurationMs,
                                            timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configMotionProfileTrajectoryPeriod(self: ctre._ctre.IMotorController, baseTrajDurationMs: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        When trajectory points are processed in the motion profile executer, the MPE determines
        how long to apply the active trajectory point by summing baseTrajDurationMs with the
        timeDur of the trajectory point (see TrajectoryPoint).
        
        This allows general selection of the execution rate of the points with 1ms resolution,
        while allowing some degree of change from point to point.
        
        :param baseTrajDurationMs: The base duration time of every trajectory point.
                          This is summed with the trajectory points unique timeDur.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                          config success and report an error if it times out.
                          If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configMotionSCurveStrength(self, curveStrength, timeoutMs):  # real signature unknown; restored from __doc__
        """
        configMotionSCurveStrength(self: ctre._ctre.IMotorController, curveStrength: int, timeoutMs: int) -> ctre._ctre.ErrorCode
        
        Sets the Motion Magic S Curve Strength.
        Call this before using Motion Magic.
        Modifying this during a Motion Magic action should be avoided.
        
        :param curveStrength: 0 to use Trapezoidal Motion Profile. [1,8] for S-Curve (greater value yields greater smoothing).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                     success and report an error if it times out. If zero, no
                     blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configNeutralDeadband(self, percentDeadband, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configNeutralDeadband(self: ctre._ctre.IMotorController, percentDeadband: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the output deadband percentage.
        
        :param percentDeadband: Desired deadband percentage. Minimum is 0.1%, Maximum is 25%.
                       Pass 0.04 for 4% (factory default).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                       config success and report an error if it times out.
                       If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configNominalOutputForward(self, percentOut, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configNominalOutputForward(self: ctre._ctre.IMotorController, percentOut: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the forward nominal output percentage.
        
        :param percentOut: Nominal (minimum) percent output. [0,+1]
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configNominalOutputReverse(self, percentOut, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configNominalOutputReverse(self: ctre._ctre.IMotorController, percentOut: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the reverse nominal output percentage.
        
        :param percentOut: Nominal (minimum) percent output. [-1,0]
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configOpenloopRamp(self, secondsFromNeutralToFull,
                           timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configOpenloopRamp(self: ctre._ctre.IMotorController, secondsFromNeutralToFull: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the open-loop ramp rate of throttle output.
        
        :param secondsFromNeutralToFull: Minimum desired time to go from neutral to full throttle. A
                                value of '0' will disable the ramp.
        
        :param timeoutMs:       Timeout value in ms. If nonzero, function will wait for
                                config success and report an error if it times out.
                                If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configPeakOutputForward(self, percentOut, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configPeakOutputForward(self: ctre._ctre.IMotorController, percentOut: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the forward peak output percentage.
        
        :param percentOut: Desired peak output percentage. [0,1]
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configPeakOutputReverse(self, percentOut, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configPeakOutputReverse(self: ctre._ctre.IMotorController, percentOut: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the reverse peak output percentage.
        
        :param percentOut: Desired peak output percentage.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configPulseWidthPeriod_EdgesPerRot(self, pulseWidthPeriod_EdgesPerRot,
                                           timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configPulseWidthPeriod_EdgesPerRot(self: ctre._ctre.IMotorController, pulseWidthPeriod_EdgesPerRot: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the edges per rotation of a pulse width sensor. (This should be set for
        tachometer use).
        
        :param pulseWidthPeriod_EdgesPerRot: edges per rotation
        
        :param timeoutMs:           Timeout value in ms. If nonzero, function will wait for
                                    config success and report an error if it times out.
                                    If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configPulseWidthPeriod_FilterWindowSz(self, pulseWidthPeriod_FilterWindowSz,
                                              timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configPulseWidthPeriod_FilterWindowSz(self: ctre._ctre.IMotorController, pulseWidthPeriod_FilterWindowSz: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the number of samples to use in smoothing a pulse width sensor with a rolling
        average. Default is 1 (no smoothing).
        
        :param pulseWidthPeriod_FilterWindowSz: samples for rolling avg
        
        :param timeoutMs:              Timeout value in ms. If nonzero, function will wait for
                                       config success and report an error if it times out.
                                       If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configRemoteFeedbackFilter(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        configRemoteFeedbackFilter(*args, **kwargs)
        Overloaded function.
        
        1. configRemoteFeedbackFilter(self: ctre._ctre.IMotorController, deviceID: int, remoteSensorSource: ctre._ctre.RemoteSensorSource, remoteOrdinal: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Select what remote device and signal to assign to Remote Sensor 0 or Remote Sensor 1.
        After binding a remote device and signal to Remote Sensor X, you may select Remote Sensor X
        as a PID source for closed-loop features.
        
        :param deviceID:  The device ID of the remote sensor device.
        
        :param remoteSensorSource: The remote sensor device and signal type to bind.
        
        :param remoteOrdinal: 0 for configuring Remote Sensor 0,
                          1 for configuring Remote Sensor 1
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                          config success and report an error if it times out.
                          If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        
        2. configRemoteFeedbackFilter(self: ctre._ctre.IMotorController, canCoderRef: ctre._ctre.CANCoder, remoteOrdinal: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Select what remote device and signal to assign to Remote Sensor 0 or Remote Sensor 1.
        After binding a remote device and signal to Remote Sensor X, you may select Remote Sensor X
        as a PID source for closed-loop features.
        
        :param canCoderRef: CANCoder device reference to use.
        
        :param remoteOrdinal: 0 for configuring Remote Sensor 0,
                     1 for configuring Remote Sensor 1
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                     config success and report an error if it times out.
                     If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configRemoteSensorClosedLoopDisableNeutralOnLOS(self, remoteSensorClosedLoopDisableNeutralOnLOS,
                                                        timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configRemoteSensorClosedLoopDisableNeutralOnLOS(self: ctre._ctre.IMotorController, remoteSensorClosedLoopDisableNeutralOnLOS: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Disables going to neutral (brake/coast) when a remote sensor is no longer detected.
        
        :param remoteSensorClosedLoopDisableNeutralOnLOS: disable going to neutral
        
        :param timeoutMs:                        Timeout value in ms. If nonzero, function will wait for
                                                 config success and report an error if it times out.
                                                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configReverseLimitSwitchSource(self, type, normalOpenOrClose, deviceID,
                                       timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configReverseLimitSwitchSource(self: ctre._ctre.IMotorController, type: ctre._ctre.RemoteLimitSwitchSource, normalOpenOrClose: ctre._ctre.LimitSwitchNormal, deviceID: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the reverse limit switch for a remote source. For example, a
        CAN motor controller may need to monitor the Limit-R pin of another Talon
        or CANifier.
        
        :param type:     Remote limit switch source. User can choose between a remote
                         Talon SRX, CANifier, or deactivate the feature.
        
        :param normalOpenOrClose: Setting for normally open, normally closed, or disabled. This
                         setting matches the Phoenix Tuner drop down.
        
        :param deviceID: Device ID of remote source (Talon SRX or CANifier device ID).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                         success and report an error if it times out. If zero, no
                         blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configReverseSoftLimitEnable(self, enable, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configReverseSoftLimitEnable(self: ctre._ctre.IMotorController, enable: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the reverse soft limit enable.
        
        :param enable: Reverse Sensor Position Limit Enable.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                 success and report an error if it times out. If zero, no
                 blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configReverseSoftLimitThreshold(self, reverseSensorLimit,
                                        timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configReverseSoftLimitThreshold(self: ctre._ctre.IMotorController, reverseSensorLimit: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the reverse soft limit threshold.
        
        :param reverseSensorLimit: Reverse Sensor Position Limit (in raw sensor units).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                          config success and report an error if it times out.
                          If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSelectedFeedbackCoefficient(self, coefficient, pidIdx=0,
                                          timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configSelectedFeedbackCoefficient(self: ctre._ctre.IMotorController, coefficient: float, pidIdx: int = 0, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        The Feedback Coefficient is a scalar applied to the value of the
        feedback sensor.  Useful when you need to scale your sensor values
        within the closed-loop calculations.  Default value is 1.
        
        Selected Feedback Sensor register in firmware is the decoded sensor value
        multiplied by the Feedback Coefficient.
        
        :param coefficient: Feedback Coefficient value.  Maximum value of 1.
                   Resolution is 1/(2^16).  Cannot be 0.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                   config success and report an error if it times out.
                   If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSelectedFeedbackSensor(self, feedbackDevice, pidIdx=0,
                                     timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configSelectedFeedbackSensor(self: ctre._ctre.IMotorController, feedbackDevice: ctre._ctre.RemoteFeedbackDevice, pidIdx: int = 0, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Select the remote feedback device for the motor controller.
        Most CTRE CAN motor controllers will support remote sensors over CAN.
        
        :param feedbackDevice: Remote Feedback Device to select.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                      config success and report an error if it times out.
                      If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSensorTerm(self, sensorTerm, feedbackDevice,
                         timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configSensorTerm(self: ctre._ctre.IMotorController, sensorTerm: ctre._ctre.SensorTerm, feedbackDevice: ctre._ctre.FeedbackDevice, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Select what sensor term should be bound to switch feedback device.
        Sensor Sum = Sensor Sum Term 0 - Sensor Sum Term 1
        Sensor Difference = Sensor Diff Term 0 - Sensor Diff Term 1
        The four terms are specified with this routine.  Then Sensor Sum/Difference
        can be selected for closed-looping.
        
        :param sensorTerm: Which sensor term to bind to a feedback source.
        
        :param feedbackDevice: The sensor signal to attach to sensorTerm.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                      config success and report an error if it times out.
                      If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSetCustomParam(self, newValue, paramIndex, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configSetCustomParam(self: ctre._ctre.IMotorController, newValue: int, paramIndex: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the value of a custom parameter. This is for arbitrary use.
        
        Sometimes it is necessary to save calibration/limit/target information in
        the device. Particularly if the device is part of a subsystem that can be
        replaced.
        
        :param newValue: Value for custom parameter.
        
        :param paramIndex: Index of custom parameter [0,1]
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                  success and report an error if it times out. If zero, no
                  blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSetParameter(self, param, value, subValue, ordinal,
                           timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configSetParameter(self: ctre._ctre.IMotorController, param: ctre._ctre.ParamEnum, value: float, subValue: int, ordinal: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets a parameter. Generally this is not used. This can be utilized in -
        Using new features without updating API installation. - Errata
        workarounds to circumvent API implementation. - Allows for rapid testing
        / unit testing of firmware.
        
        :param param: Parameter enumeration.
        
        :param value: Value of parameter.
        
        :param subValue: Subvalue for parameter. Maximum value of 255.
        
        :param ordinal: Ordinal of parameter.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                 success and report an error if it times out. If zero, no
                 blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSoftLimitDisableNeutralOnLOS(self, softLimitDisableNeutralOnLOS,
                                           timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configSoftLimitDisableNeutralOnLOS(self: ctre._ctre.IMotorController, softLimitDisableNeutralOnLOS: bool, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Disables soft limits triggering (if enabled) when the sensor is no longer detected.
        
        :param softLimitDisableNeutralOnLOS: disable triggering
        
        :param timeoutMs:           Timeout value in ms. If nonzero, function will wait for
                                    config success and report an error if it times out.
                                    If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configVoltageCompSaturation(self, voltage, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configVoltageCompSaturation(self: ctre._ctre.IMotorController, voltage: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the Voltage Compensation saturation voltage.
        
        :param voltage: This is the max voltage to apply to the hbridge when voltage
                 compensation is enabled.  For example, if 10 (volts) is specified
                 and a TalonSRX is commanded to 0.5 (PercentOutput, closed-loop, etc)
                 then the TalonSRX will attempt to apply a duty-cycle to produce 5V.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configVoltageMeasurementFilter(self, filterWindowSamples,
                                       timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configVoltageMeasurementFilter(self: ctre._ctre.IMotorController, filterWindowSamples: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the voltage measurement filter.
        
        :param filterWindowSamples: Number of samples in the rolling average of voltage
                           measurement.
        
        :param timeoutMs:  Timeout value in ms. If nonzero, function will wait for
                           config success and report an error if it times out.
                           If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def config_IntegralZone(self, slotIdx, izone, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        config_IntegralZone(self: ctre._ctre.IMotorController, slotIdx: int, izone: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the Integral Zone constant in the given parameter slot. If the
        (absolute) closed-loop error is outside of this zone, integral
        accumulator is automatically cleared. This ensures than integral wind up
        events will stop after the sensor gets far enough from its target.
        
        :param slotIdx: Parameter slot for the constant.
        
        :param izone: Value of the Integral Zone constant (closed loop error units X
                 1ms).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                 success and report an error if it times out. If zero, no
                 blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def config_kD(self, slotIdx, value, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        config_kD(self: ctre._ctre.IMotorController, slotIdx: int, value: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the 'D' constant in the given parameter slot.
        
        This is multiplied by derivative error (sensor units per PID loop, typically 1ms).
        Note the closed loop output interprets a final value of 1023 as full output.
        So use a gain of '250' to get full output if derr is 4096u (Mag Encoder 1 rotation) per 1000 loops (typ 1 sec)
        
        :param slotIdx: Parameter slot for the constant.
        
        :param value: Value of the D constant.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def config_kF(self, slotIdx, value, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        config_kF(self: ctre._ctre.IMotorController, slotIdx: int, value: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the 'F' constant in the given parameter slot.
        
        See documentation for calculation details.
        If using velocity, motion magic, or motion profile,
        use (1023 * duty-cycle / sensor-velocity-sensor-units-per-100ms).
        
        :param slotIdx: Parameter slot for the constant.
        
        :param value: Value of the F constant.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def config_kI(self, slotIdx, value, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        config_kI(self: ctre._ctre.IMotorController, slotIdx: int, value: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the 'I' constant in the given parameter slot.
        This is multiplied by accumulated closed loop error in sensor units every PID Loop.
        Note the closed loop output interprets a final value of 1023 as full output.
        So use a gain of '0.00025' to get full output if err is 4096u for 1000 loops (accumulater holds 4,096,000),
        [which is equivalent to one CTRE mag encoder rotation for 1000 milliseconds].
        
        :param slotIdx: Parameter slot for the constant.
        
        :param value: Value of the I constant.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def config_kP(self, slotIdx, value, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        config_kP(self: ctre._ctre.IMotorController, slotIdx: int, value: float, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the 'P' constant in the given parameter slot.
        This is multiplied by closed loop error in sensor units.
        Note the closed loop output interprets a final value of 1023 as full output.
        So use a gain of '0.25' to get full output if err is 4096u (Mag Encoder 1 rotation)
        
        :param slotIdx: Parameter slot for the constant.
        
        :param value: Value of the P constant.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def enableVoltageCompensation(self, enable):  # real signature unknown; restored from __doc__
        """
        enableVoltageCompensation(self: ctre._ctre.IMotorController, enable: bool) -> None
        
        Enables voltage compensation. If enabled, voltage compensation works in
        all control modes.
        
        Be sure to configure the saturation voltage before enabling this.
        
        :param enable: Enable state of voltage compensation.
        """
        pass

    def getActiveTrajectoryArbFeedFwd(self, pidIdx=0):  # real signature unknown; restored from __doc__
        """
        getActiveTrajectoryArbFeedFwd(self: ctre._ctre.IMotorController, pidIdx: int = 0) -> float
        
        Gets the active trajectory arbitrary feedforward using
        MotionMagic/MotionProfile control modes.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :returns: The Active Trajectory ArbFeedFwd in units of percent output
                  (where 0.01 is 1%).
        """
        return 0.0

    def getActiveTrajectoryHeading(self):  # real signature unknown; restored from __doc__
        """
        getActiveTrajectoryHeading(self: ctre._ctre.IMotorController) -> float
        
        Gets the active trajectory target heading using
        MotionMagicArc/MotionProfileArc control modes.
        
        :returns: The Active Trajectory Heading in degrees.
                  @deprecated Use :meth:`.GetActiveTrajectoryPosition` with 1 passed as an argument instead.
        """
        return 0.0

    def getActiveTrajectoryPosition(self, pidIdx=0):  # real signature unknown; restored from __doc__
        """
        getActiveTrajectoryPosition(self: ctre._ctre.IMotorController, pidIdx: int = 0) -> int
        
        Gets the active trajectory target position for using
        MotionMagic/MotionProfile control modes.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :returns: The Active Trajectory Position in sensor units.
        """
        return 0

    def getActiveTrajectoryVelocity(self, pidIdx=0):  # real signature unknown; restored from __doc__
        """
        getActiveTrajectoryVelocity(self: ctre._ctre.IMotorController, pidIdx: int = 0) -> int
        
        Gets the active trajectory target velocity for using
        MotionMagic/MotionProfile control modes.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :returns: The Active Trajectory Velocity in sensor units per 100ms.
        """
        return 0

    def getBaseID(self):  # real signature unknown; restored from __doc__
        """
        getBaseID(self: ctre._ctre.IMotorController) -> int
        
        
        
        :returns: BaseID of device
        """
        return 0

    def getBusVoltage(self):  # real signature unknown; restored from __doc__
        """
        getBusVoltage(self: ctre._ctre.IMotorController) -> float
        
        Gets the bus voltage seen by the device.
        
        :returns: The bus voltage value (in volts).
        """
        return 0.0

    def getClosedLoopError(self, pidIdx=0):  # real signature unknown; restored from __doc__
        """
        getClosedLoopError(self: ctre._ctre.IMotorController, pidIdx: int = 0) -> int
        
        Gets the closed-loop error. The units depend on which control mode is in
        use.
        
        If closed-loop is seeking a target sensor position, closed-loop error is the difference between target
        and current sensor value (in sensor units.  Example 4096 units per rotation for CTRE Mag Encoder).
        
        If closed-loop is seeking a target sensor velocity, closed-loop error is the difference between target
        and current sensor value (in sensor units per 100ms).
        
        If using motion profiling or Motion Magic, closed loop error is calculated against the current target,
        and not the "final" target at the end of the profile/movement.
        
        See Phoenix-Documentation information on units.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :returns: Closed-loop error value.
        """
        return 0

    def getClosedLoopTarget(self, pidIdx=0):  # real signature unknown; restored from __doc__
        """
        getClosedLoopTarget(self: ctre._ctre.IMotorController, pidIdx: int = 0) -> float
        
        Gets the current target of a given closed loop.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :returns: The closed loop target.
        """
        return 0.0

    def getControlMode(self):  # real signature unknown; restored from __doc__
        """
        getControlMode(self: ctre._ctre.IMotorController) -> ctre._ctre.ControlMode
        
        
        
        :returns: control mode motor controller is in
        """
        pass

    def getDeviceID(self):  # real signature unknown; restored from __doc__
        """
        getDeviceID(self: ctre._ctre.IMotorController) -> int
        
        Returns the Device ID
        
        :returns: Device number.
        """
        return 0

    def getErrorDerivative(self, pidIdx=0):  # real signature unknown; restored from __doc__
        """
        getErrorDerivative(self: ctre._ctre.IMotorController, pidIdx: int = 0) -> float
        
        Gets the derivative of the closed-loop error.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :returns: The error derivative value.
        """
        return 0.0

    def getFaults(self, toFill):  # real signature unknown; restored from __doc__
        """
        getFaults(self: ctre._ctre.IMotorController, toFill: ctre._ctre.Faults) -> ctre._ctre.ErrorCode
        
        Polls the various fault flags.
        
        :param toFill: Caller's object to fill with latest fault flags.
        
        :returns: Last Error Code generated by a function.
        """
        pass

    def getFirmwareVersion(self):  # real signature unknown; restored from __doc__
        """
        getFirmwareVersion(self: ctre._ctre.IMotorController) -> int
        
        Gets the firmware version of the device.
        
        :returns: Firmware version of device. For example: version 1-dot-2 is
                  0x0102.
        """
        return 0

    def getIntegralAccumulator(self, pidIdx=0):  # real signature unknown; restored from __doc__
        """
        getIntegralAccumulator(self: ctre._ctre.IMotorController, pidIdx: int = 0) -> float
        
        Gets the iaccum value.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :returns: Integral accumulator value (Closed-loop error X 1ms).
        """
        return 0.0

    def getInverted(self):  # real signature unknown; restored from __doc__
        """
        getInverted(self: ctre._ctre.IMotorController) -> bool
        
        
        
        :returns: invert setting of motor output.
        """
        return False

    def getLastError(self):  # real signature unknown; restored from __doc__
        """
        getLastError(self: ctre._ctre.IMotorController) -> ctre._ctre.ErrorCode
        
        Gets the last error generated by this object. Not all functions return an
        error code but can potentially report errors. This function can be used
        to retrieve those error codes.
        
        :returns: Last Error Code generated by a function.
        """
        pass

    def getMotionProfileStatus(self, statusToFill):  # real signature unknown; restored from __doc__
        """
        getMotionProfileStatus(self: ctre._ctre.IMotorController, statusToFill: ctre._ctre.MotionProfileStatus) -> ctre._ctre.ErrorCode
        
        Retrieve all status information.
        For best performance, Caller can snapshot all status information regarding the
        motion profile executer.
        
        :param statusToFill: Caller supplied object to fill.
        
                    The members are filled, as follows...
        
                    topBufferRem:	The available empty slots in the trajectory buffer.
                    The robot API holds a "top buffer" of trajectory points, so your applicaion
                    can dump several points at once.  The API will then stream them into the
                    low-level buffer, allowing the motor controller to act on them.
        
                    topBufferRem: The number of points in the top trajectory buffer.
        
                    btledBufferCnt: The number of points in the low level controller buffer.
        
                    hasUnderrun: 	Set if isUnderrun ever gets set.
                    Can be manually cleared by clearMotionProfileHasUnderrun() or automatically cleared by startMotionProfile().
        
                    isUnderrun:		This is set if controller needs to shift a point from its buffer into
                    the active trajectory point however
                    the buffer is empty.
                    This gets cleared automatically when is resolved.
        
                    activePointValid:	True if the active trajectory point is not empty, false otherwise. The members in activePoint are only valid if this signal is set.
        
                    isLast:	is set/cleared based on the MP executer's current
                    trajectory point's IsLast value.  This assumes
                    IsLast was set when PushMotionProfileTrajectory
                    was used to insert the currently processed trajectory
                    point.
        
                    profileSlotSelect: The currently processed trajectory point's
                    selected slot.  This can differ in the currently selected slot used
                    for Position and Velocity servo modes
        
                    outputEnable:		The current output mode of the motion profile
                    executer (disabled, enabled, or hold).  When changing the set()
                    value in MP mode, it's important to check this signal to
                    confirm the change takes effect before interacting with the top buffer.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def getMotionProfileTopLevelBufferCount(self):  # real signature unknown; restored from __doc__
        """
        getMotionProfileTopLevelBufferCount(self: ctre._ctre.IMotorController) -> int
        
        Retrieve just the buffer count for the api-level (top) buffer. This
        routine performs no CAN or data structure lookups, so its fast and ideal
        if caller needs to quickly poll the progress of trajectory points being
        emptied into controller's RAM. Otherwise just use GetMotionProfileStatus.
        
        :returns: number of trajectory points in the top buffer.
        """
        return 0

    def getMotorOutputPercent(self):  # real signature unknown; restored from __doc__
        """
        getMotorOutputPercent(self: ctre._ctre.IMotorController) -> float
        
        Gets the output percentage of the motor controller.
        
        :returns: Output of the motor controller (in percent).
        """
        return 0.0

    def getMotorOutputVoltage(self):  # real signature unknown; restored from __doc__
        """
        getMotorOutputVoltage(self: ctre._ctre.IMotorController) -> float
        
        
        
        :returns: applied voltage to motor  in volts.
        """
        return 0.0

    def getSelectedSensorPosition(self, pidIdx=0):  # real signature unknown; restored from __doc__
        """
        getSelectedSensorPosition(self: ctre._ctre.IMotorController, pidIdx: int = 0) -> int
        
        Get the selected sensor position (in raw sensor units).
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop. See
              Phoenix-Documentation for how to interpret.
        
        :returns: Position of selected sensor (in raw sensor units).
        """
        return 0

    def getSelectedSensorVelocity(self, pidIdx=0):  # real signature unknown; restored from __doc__
        """
        getSelectedSensorVelocity(self: ctre._ctre.IMotorController, pidIdx: int = 0) -> int
        
        Get the selected sensor velocity.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :returns: selected sensor (in raw sensor units) per 100ms.
                  See Phoenix-Documentation for how to interpret.
        """
        return 0

    def getStatusFramePeriod(self, frame, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        getStatusFramePeriod(self: ctre._ctre.IMotorController, frame: ctre._ctre.StatusFrame, timeoutMs: int = 0) -> int
        
        Gets the period of the given status frame.
        
        :param frame: Frame to get the period of.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Period of the given status frame.
        """
        return 0

    def getStickyFaults(self, toFill):  # real signature unknown; restored from __doc__
        """
        getStickyFaults(self: ctre._ctre.IMotorController, toFill: ctre._ctre.StickyFaults) -> ctre._ctre.ErrorCode
        
        Polls the various sticky fault flags.
        
        :param toFill: Caller's object to fill with latest sticky fault flags.
        
        :returns: Last Error Code generated by a function.
        """
        pass

    def getTemperature(self):  # real signature unknown; restored from __doc__
        """
        getTemperature(self: ctre._ctre.IMotorController) -> float
        
        Gets the temperature of the motor controller.
        
        :returns: Temperature of the motor controller (in 'C)
        """
        return 0.0

    def hasResetOccurred(self):  # real signature unknown; restored from __doc__
        """
        hasResetOccurred(self: ctre._ctre.IMotorController) -> bool
        
        Returns true if the device has reset since last call.
        
        :returns: Has a Device Reset Occurred?
        """
        return False

    def isMotionProfileTopLevelBufferFull(self):  # real signature unknown; restored from __doc__
        """
        isMotionProfileTopLevelBufferFull(self: ctre._ctre.IMotorController) -> bool
        
        Retrieve just the buffer full for the api-level (top) buffer. This
        routine performs no CAN or data structure lookups, so its fast and ideal
        if caller needs to quickly poll. Otherwise just use
        GetMotionProfileStatus.
        
        :returns: number of trajectory points in the top buffer.
        """
        return False

    def isVoltageCompensationEnabled(self):  # real signature unknown; restored from __doc__
        """
        isVoltageCompensationEnabled(self: ctre._ctre.IMotorController) -> bool
        
        Returns the enable state of Voltage Compensation that the caller has set.
        
        :returns: TRUE if voltage compensation is enabled.
        """
        return False

    def neutralOutput(self):  # real signature unknown; restored from __doc__
        """
        neutralOutput(self: ctre._ctre.IMotorController) -> None
        
        Neutral the motor output by setting control mode to disabled.
        """
        pass

    def overrideLimitSwitchesEnable(self, enable):  # real signature unknown; restored from __doc__
        """
        overrideLimitSwitchesEnable(self: ctre._ctre.IMotorController, enable: bool) -> None
        
        Sets the enable state for limit switches.
        
        :param enable: Enable state for limit switches.
        """
        pass

    def overrideSoftLimitsEnable(self, enable):  # real signature unknown; restored from __doc__
        """
        overrideSoftLimitsEnable(self: ctre._ctre.IMotorController, enable: bool) -> None
        
        Can be used to override-disable the soft limits.
        This function can be used to quickly disable soft limits without
        having to modify the persistent configuration.
        
        :param enable: Enable state for soft limit switches.
        """
        pass

    def processMotionProfileBuffer(self):  # real signature unknown; restored from __doc__
        """
        processMotionProfileBuffer(self: ctre._ctre.IMotorController) -> None
        
        This must be called periodically to funnel the trajectory points from the
        API's top level buffer to the controller's bottom level buffer. Recommendation
        is to call this twice as fast as the execution rate of the motion
        profile. So if MP is running with 20ms trajectory points, try calling
        this routine every 10ms. All motion profile functions are thread-safe
        through the use of a mutex, so there is no harm in having the caller
        utilize threading.
        """
        pass

    def pushMotionProfileTrajectory(self, trajPt):  # real signature unknown; restored from __doc__
        """
        pushMotionProfileTrajectory(self: ctre._ctre.IMotorController, trajPt: ctre._ctre.TrajectoryPoint) -> ctre._ctre.ErrorCode
        
        Push another trajectory point into the top level buffer (which is emptied
        into the motor controller's bottom buffer as room allows).
        
        :param trajPt: to push into buffer.
              The members should be filled in with these values...
        
              targPos:  servo position in sensor units.
              targVel:  velocity to feed-forward in sensor units
              per 100ms.
              profileSlotSelect0  Which slot to get PIDF gains. PID is used for position servo. F is used
              as the Kv constant for velocity feed-forward. Typically this is hardcoded
              to the a particular slot, but you are free gain schedule if need be.
              Choose from [0,3]
              profileSlotSelect1 Which slot to get PIDF gains for auxiliary PId.
              This only has impact during MotionProfileArc Control mode.
              Choose from [0,1].
              isLastPoint  set to nonzero to signal motor controller to keep processing this
              trajectory point, instead of jumping to the next one
              when timeDurMs expires.  Otherwise MP executer will
              eventually see an empty buffer after the last point
              expires, causing it to assert the IsUnderRun flag.
              However this may be desired if calling application
              never wants to terminate the MP.
              zeroPos  set to nonzero to signal motor controller to "zero" the selected
              position sensor before executing this trajectory point.
              Typically the first point should have this set only thus
              allowing the remainder of the MP positions to be relative to
              zero.
              timeDur Duration to apply this trajectory pt.
              This time unit is ADDED to the exising base time set by
              configMotionProfileTrajectoryPeriod().
        
        :returns: CTR_OKAY if trajectory point push ok. ErrorCode if buffer is
                  full due to kMotionProfileTopBufferCapacity.
        """
        pass

    def selectProfileSlot(self, slotIdx, pidIdx):  # real signature unknown; restored from __doc__
        """
        selectProfileSlot(self: ctre._ctre.IMotorController, slotIdx: int, pidIdx: int) -> ctre._ctre.ErrorCode
        
        Selects which profile slot to use for closed-loop control.
        
        :param slotIdx: Profile slot to select.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        """
        pass

    def set(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        set(*args, **kwargs)
        Overloaded function.
        
        1. set(self: ctre._ctre.IMotorController, Mode: ctre._ctre.ControlMode, demand: float) -> None
        
        Sets the appropriate output on the talon, depending on the mode.
        
        :param Mode: The output mode to apply.
              In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped.
              In Current mode, output value is in amperes.
              In Velocity mode, output value is in position change / 100ms.
              In Position mode, output value is in encoder ticks or an analog value,
              depending on the sensor.
              In Follower mode, the output value is the integer device ID of the talon to
              duplicate.
        
        :param demand: The setpoint value, as described above.
        
        
              Standard Driving Example:
              _talonLeft.set(ControlMode.PercentOutput, leftJoy);
              _talonRght.set(ControlMode.PercentOutput, rghtJoy);
        
        2. set(self: ctre._ctre.IMotorController, mode: ctre._ctre.ControlMode, demand0: float, demand1Type: ctre._ctre.DemandType, demand1: float) -> None
        
        
        
        :param mode: Sets the appropriate output on the talon, depending on the mode.
        
        :param demand0: The output value to apply.
                   such as advanced feed forward and/or auxiliary close-looping in firmware.
                   In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped.
                   In Current mode, output value is in amperes.
                   In Velocity mode, output value is in position change / 100ms.
                   In Position mode, output value is in encoder ticks or an analog value,
                   depending on the sensor. See
                   In Follower mode, the output value is the integer device ID of the talon to
                   duplicate.
        
        :param demand1Type: The demand type for demand1.
                   Neutral: Ignore demand1 and apply no change to the demand0 output.
                   AuxPID: Use demand1 to set the target for the auxiliary PID 1.
                   ArbitraryFeedForward: Use demand1 as an arbitrary additive value to the
                   demand0 output.  In PercentOutput the demand0 output is the motor output,
                   and in closed-loop modes the demand0 output is the output of PID0.
        
        :param demand1: Supplmental output value.  Units match the set mode.
        
        
                   Arcade Drive Example:
                   _talonLeft.set(ControlMode.PercentOutput, joyForward, DemandType.ArbitraryFeedForward, +joyTurn);
                   _talonRght.set(ControlMode.PercentOutput, joyForward, DemandType.ArbitraryFeedForward, -joyTurn);
        
                   Drive Straight Example:
                   Note: Selected Sensor Configuration is necessary for both PID0 and PID1.
                   _talonLeft.follow(_talonRght, FollwerType.AuxOutput1);
                   _talonRght.set(ControlMode.PercentOutput, joyForward, DemandType.AuxPID, desiredRobotHeading);
        
                   Drive Straight to a Distance Example:
                   Note: Other configurations (sensor selection, PID gains, etc.) need to be set.
                   _talonLeft.follow(_talonRght, FollwerType.AuxOutput1);
                   _talonRght.set(ControlMode.MotionMagic, targetDistance, DemandType.AuxPID, desiredRobotHeading);
        """
        pass

    def setControlFramePeriod(self, frame, periodMs):  # real signature unknown; restored from __doc__
        """
        setControlFramePeriod(self: ctre._ctre.IMotorController, frame: ctre._ctre.ControlFrame, periodMs: int) -> ctre._ctre.ErrorCode
        
        Sets the period of the given control frame.
        
        :param frame: Frame whose period is to be changed.
        
        :param periodMs: Period in ms for the given frame.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def setIntegralAccumulator(self, iaccum, pidIdx=0, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        setIntegralAccumulator(self: ctre._ctre.IMotorController, iaccum: float, pidIdx: int = 0, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the integral accumulator. Typically this is used to clear/zero the
        integral accumulator, however some use cases may require seeding the
        accumulator for a faster response.
        
        :param iaccum: Value to set for the integral accumulator (closed loop error
                 units X 1ms).
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                 success and report an error if it times out. If zero, no
                 blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def setInverted(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        setInverted(*args, **kwargs)
        Overloaded function.
        
        1. setInverted(self: ctre._ctre.IMotorController, invert: bool) -> None
        
        Inverts the hbridge output of the motor controller.
        
        This does not impact sensor phase and should not be used to correct sensor polarity.
        
        This will invert the hbridge output but NOT the LEDs.
        This ensures....
        - Green LEDs always represents positive request from robot-controller/closed-looping mode.
        - Green LEDs correlates to forward limit switch.
        - Green LEDs correlates to forward soft limit.
        
        :param invert: Invert state to set.
        
        2. setInverted(self: ctre._ctre.IMotorController, invertType: ctre._ctre.InvertType) -> None
        
        Inverts the hbridge output of the motor controller in relation to the master if present
        
        This does not impact sensor phase and should not be used to correct sensor polarity.
        
        This will allow you to either:
        - Not invert the motor
        - Invert the motor
        - Always follow the master regardless of master's inversion
        - Always oppose the master regardless of master's inversion
        
        :param invertType: Invert state to set.
        """
        pass

    def setNeutralMode(self, neutralMode):  # real signature unknown; restored from __doc__
        """
        setNeutralMode(self: ctre._ctre.IMotorController, neutralMode: ctre._ctre.NeutralMode) -> None
        
        Sets the mode of operation during neutral throttle output.
        
        :param neutralMode: The desired mode of operation when the Controller output
                   throttle is neutral (ie brake/coast)
        """
        pass

    def setSelectedSensorPosition(self, sensorPos, pidIdx=0,
                                  timeoutMs=50):  # real signature unknown; restored from __doc__
        """
        setSelectedSensorPosition(self: ctre._ctre.IMotorController, sensorPos: int, pidIdx: int = 0, timeoutMs: int = 50) -> ctre._ctre.ErrorCode
        
        Sets the sensor position to the given value.
        
        :param sensorPos: Position to set for the selected sensor (in raw sensor units).
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def setSensorPhase(self, PhaseSensor):  # real signature unknown; restored from __doc__
        """
        setSensorPhase(self: ctre._ctre.IMotorController, PhaseSensor: bool) -> None
        
        Sets the phase of the sensor. Use when controller forward/reverse output
        doesn't correlate to appropriate forward/reverse reading of sensor.
        Pick a value so that positive PercentOutput yields a positive change in sensor.
        After setting this, user can freely call SetInverted() with any value.
        
        :param PhaseSensor: Indicates whether to invert the phase of the sensor.
        """
        pass

    def setStatusFramePeriod(self, frame, periodMs, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        setStatusFramePeriod(self: ctre._ctre.IMotorController, frame: ctre._ctre.StatusFrame, periodMs: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the period of the given status frame.
        
        User ensure CAN Bus utilization is not high.
        
        This setting is not persistent and is lost when device is reset. If this
        is a concern, calling application can use HasResetOccurred() to determine if the
        status frame needs to be reconfigured.
        
        :param frame: Frame whose period is to be changed.
        
        :param periodMs: Period in ms for the given frame.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                 success and report an error if it times out. If zero, no
                 blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def __init__(self, *args, **kwargs):  # real signature unknown
        pass
