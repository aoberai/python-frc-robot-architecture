from codeinternals.ctre import BaseMotorController, IMotorControllerEnhanced


class BaseTalon(BaseMotorController, IMotorControllerEnhanced):
    """ CTRE Talon SRX Motor Controller when used on CAN Bus. """

    def configForwardLimitSwitchSource(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        configForwardLimitSwitchSource(*args, **kwargs)
        Overloaded function.
        
        1. configForwardLimitSwitchSource(self: ctre._ctre.BaseTalon, limitSwitchSource: ctre._ctre.LimitSwitchSource, normalOpenOrClose: ctre._ctre.LimitSwitchNormal, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures a limit switch for a local/remote source.
        
        For example, a CAN motor controller may need to monitor the Limit-R pin
        of another Talon, CANifier, or local Gadgeteer feedback connector.
        
        If the sensor is remote, a device ID of zero is assumed.
        If that's not desired, use the four parameter version of this function.
        
        :param limitSwitchSource: Limit switch source.
                         User can choose between the feedback connector, remote Talon SRX, CANifier, or deactivate the feature.
        
        :param normalOpenOrClose: Setting for normally open, normally closed, or disabled. This setting
                         matches the Phoenix Tuner drop down.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                         config success and report an error if it times out.
                         If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        
        2. configForwardLimitSwitchSource(self: ctre._ctre.BaseTalon, limitSwitchSource: ctre._ctre.RemoteLimitSwitchSource, normalOpenOrClose: ctre._ctre.LimitSwitchNormal, deviceID: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures a limit switch for a local/remote source.
        
        For example, a CAN motor controller may need to monitor the Limit-R pin
        of another Talon, CANifier, or local Gadgeteer feedback connector.
        
        If the sensor is remote, a device ID of zero is assumed.
        If that's not desired, use the four parameter version of this function.
        
        :param limitSwitchSource: Limit switch source.
                         User can choose between the feedback connector, remote Talon SRX, CANifier, or deactivate the feature.
        
        :param normalOpenOrClose: Setting for normally open, normally closed, or disabled. This setting
                         matches the Phoenix Tuner drop down.
        
        :param deviceID: Device ID of remote source (Talon SRX or CANifier device ID).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                         config success and report an error if it times out.
                         If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configReverseLimitSwitchSource(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        configReverseLimitSwitchSource(*args, **kwargs)
        Overloaded function.
        
        1. configReverseLimitSwitchSource(self: ctre._ctre.BaseTalon, limitSwitchSource: ctre._ctre.LimitSwitchSource, normalOpenOrClose: ctre._ctre.LimitSwitchNormal, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures a limit switch for a local/remote source.
        
        For example, a CAN motor controller may need to monitor the Limit-R pin
        of another Talon, CANifier, or local Gadgeteer feedback connector.
        
        If the sensor is remote, a device ID of zero is assumed. If that's not
        desired, use the four parameter version of this function.
        
        :param limitSwitchSource: Limit switch source. @see #LimitSwitchSource User can choose
                         between the feedback connector, remote Talon SRX, CANifier, or
                         deactivate the feature.
        
        :param normalOpenOrClose: Setting for normally open, normally closed, or disabled. This
                         setting matches the Phoenix Tuner drop down.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                         success and report an error if it times out. If zero, no
                         blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        
        2. configReverseLimitSwitchSource(self: ctre._ctre.BaseTalon, limitSwitchSource: ctre._ctre.RemoteLimitSwitchSource, normalOpenOrClose: ctre._ctre.LimitSwitchNormal, deviceID: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures a limit switch for a local/remote source.
        
        For example, a CAN motor controller may need to monitor the Limit-R pin
        of another Talon, CANifier, or local Gadgeteer feedback connector.
        
        If the sensor is remote, a device ID of zero is assumed. If that's not
        desired, use the four parameter version of this function.
        
        :param limitSwitchSource: Limit switch source. @see #LimitSwitchSource User can choose
                         between the feedback connector, remote Talon SRX, CANifier, or
                         deactivate the feature.
        
        :param normalOpenOrClose: Setting for normally open, normally closed, or disabled. This
                         setting matches the Phoenix Tuner drop down.
        
        :param deviceID: Device ID of remote source (Talon SRX or CANifier device ID).
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                         success and report an error if it times out. If zero, no
                         blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSelectedFeedbackSensor(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        configSelectedFeedbackSensor(*args, **kwargs)
        Overloaded function.
        
        1. configSelectedFeedbackSensor(self: ctre._ctre.BaseTalon, feedbackDevice: ctre._ctre.FeedbackDevice, pidIdx: int = 0, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Select the remote feedback device for the motor controller.
        Most CTRE CAN motor controllers will support remote sensors over CAN.
        
        :param feedbackDevice: Remote Feedback Device to select.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                      config success and report an error if it times out.
                      If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        
        2. configSelectedFeedbackSensor(self: ctre._ctre.BaseTalon, feedbackDevice: ctre._ctre.RemoteFeedbackDevice, pidIdx: int = 0, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Select the remote feedback device for the motor controller.
        Most CTRE CAN motor controllers will support remote sensors over CAN.
        
        :param feedbackDevice: Remote Feedback Device to select.
        
        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                      config success and report an error if it times out.
                      If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configSupplyCurrentLimit(self, currLimitConfigs, timeoutMs=0):  # real signature unknown; restored from __doc__
        """ configSupplyCurrentLimit(self: ctre._ctre.BaseTalon, currLimitConfigs: ctre._ctre.SupplyCurrentLimitConfiguration, timeoutMs: int = 0) -> ctre._ctre.ErrorCode """
        pass

    def configVelocityMeasurementPeriod(self, period, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configVelocityMeasurementPeriod(self: ctre._ctre.BaseTalon, period: ctre._ctre.VelocityMeasPeriod, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Configures the period of each velocity sample.
        Every 1ms a position value is sampled, and the delta between that sample
        and the position sampled kPeriod ms ago is inserted into a filter.
        kPeriod is configured with this function.
        
        :param period: Desired period for the velocity measurement. @see
                 #VelocityMeasPeriod
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def configVelocityMeasurementWindow(self, windowSize, timeoutMs=0):  # real signature unknown; restored from __doc__
        """
        configVelocityMeasurementWindow(self: ctre._ctre.BaseTalon, windowSize: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the number of velocity samples used in the rolling average velocity
        measurement.
        
        :param windowSize: Number of samples in the rolling average of velocity
                  measurement. Valid values are 1,2,4,8,16,32. If another
                  value is specified, it will truncate to nearest support value.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                  config success and report an error if it times out.
                  If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def getOutputCurrent(self):  # real signature unknown; restored from __doc__
        """
        getOutputCurrent(self: ctre._ctre.BaseTalon) -> float
        
        Gets the output current of the motor controller.
        In the case of TalonSRX class, this routine returns supply current for legacy reasons.  In order to get the "true" output current, call GetStatorCurrent().
        In the case of TalonFX class, this routine returns the true output stator current.
        
        [[deprecated("Use GetStatorCurrent/GetSupplyCurrent instead.")]]
        
        :returns: The output current (in amps).
        """
        return 0.0

    def getStatorCurrent(self):  # real signature unknown; restored from __doc__
        """
        getStatorCurrent(self: ctre._ctre.BaseTalon) -> float
        
        Gets the stator/output current of the motor controller.
        
        :returns: The stator/output current (in amps).
        """
        return 0.0

    def getStatusFramePeriod(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        getStatusFramePeriod(*args, **kwargs)
        Overloaded function.
        
        1. getStatusFramePeriod(self: ctre._ctre.BaseTalon, frame: ctre._ctre.StatusFrameEnhanced, timeoutMs: int = 0) -> int
        
        Gets the period of the given status frame.
        
        :param frame: Frame to get the period of.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Period of the given status frame.
        
        2. getStatusFramePeriod(self: ctre._ctre.BaseTalon, frame: ctre._ctre.StatusFrame, timeoutMs: int = 0) -> int
        
        Gets the period of the given status frame.
        
        :param frame: Frame to get the period of.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Period of the given status frame.
        """
        pass

    def getSupplyCurrent(self):  # real signature unknown; restored from __doc__
        """
        getSupplyCurrent(self: ctre._ctre.BaseTalon) -> float
        
        Gets the supply/input current of the motor controller.
        
        :returns: The supply/input current (in amps).
        """
        return 0.0

    def isFwdLimitSwitchClosed(self):  # real signature unknown; restored from __doc__
        """ isFwdLimitSwitchClosed(self: ctre._ctre.BaseTalon) -> int """
        return 0

    def isRevLimitSwitchClosed(self):  # real signature unknown; restored from __doc__
        """ isRevLimitSwitchClosed(self: ctre._ctre.BaseTalon) -> int """
        return 0

    def setStatusFramePeriod(self, *args, **kwargs):  # real signature unknown; restored from __doc__
        """
        setStatusFramePeriod(*args, **kwargs)
        Overloaded function.
        
        1. setStatusFramePeriod(self: ctre._ctre.BaseTalon, frame: ctre._ctre.StatusFrameEnhanced, periodMs: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the period of the given status frame.
        
        User ensure CAN Bus utilization is not high.
        
        This setting is not persistent and is lost when device is reset.
        If this is a concern, calling application can use HasResetOccurred()
        to determine if the status frame needs to be reconfigured.
        
        :param frame: Frame whose period is to be changed.
        
        :param periodMs: Period in ms for the given frame.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        
        2. setStatusFramePeriod(self: ctre._ctre.BaseTalon, frame: ctre._ctre.StatusFrame, periodMs: int, timeoutMs: int = 0) -> ctre._ctre.ErrorCode
        
        Sets the period of the given status frame.
        
        User ensure CAN Bus utilization is not high.
        
        This setting is not persistent and is lost when device is reset.
        If this is a concern, calling application can use HasResetOccurred()
        to determine if the status frame needs to be reconfigured.
        
        :param frame: Frame whose period is to be changed.
        
        :param periodMs: Period in ms for the given frame.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                 config success and report an error if it times out.
                 If zero, no blocking or checking is performed.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def __init__(self, *args, **kwargs):  # real signature unknown
        pass
