# encoding: utf-8
# module ctre._ctre
# from C:\Users\Nolan\Documents\Robotics\python-frc-robot-architecture\venv\lib\site-packages\ctre\_ctre.cp37-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import pybind11_builtins as __pybind11_builtins


class Orchestra(__pybind11_builtins.pybind11_object):
    """
    An Orchestra is used to play music through Talon FX motor controllers.
    It uses a "Chirp" (.chrp) music file that can be generated using Phoenix Tuner.
    
    Chirp files are generated from standard MIDI files.
    Each Talon FX can only play a single track within the music file.
    For multi-track files, multiple Talon FXs are needed.
    ie, The first track will be played through the first Talon FX added,
    the second track will be played through the second Talon FX added, etc.
    
    Any Chirp file located in the src/main/deploy directory of your FRC project
    will automatically be copied to the roboRIO on code deploy.
    
    To use the Orchestra:
    - Add the Talon FXs to be used as instruments
    - Load the Chirp file to be played using the LoadMusic routine.
    
    Once ready, the Orchestra can be controlled using standard
    play/pause/stop routines.
    
    New music files can be loaded at any time.
    
    The robot must be enabled to play music.
    
    Calling set on any of the TalonFX instruments while the orchestra is
    playing will pause the orchestra.
    """

    def addInstrument(self, instrument, *args,
                      **kwargs):  # real signature unknown; NOTE: unreliably restored from __doc__
        """
        addInstrument(self: ctre._ctre.Orchestra, instrument: ctre::phoenix::motorcontrol::can::TalonFX) -> ctre._ctre.ErrorCode
        
        Adds another instrument to the orchestra.
        
        :param instrument: TalonFX to add to orchestra
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def clearInstruments(self):  # real signature unknown; restored from __doc__
        """
        clearInstruments(self: ctre._ctre.Orchestra) -> ctre._ctre.ErrorCode
        
        Clears all instruments in the orchestra.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def isPlaying(self):  # real signature unknown; restored from __doc__
        """
        isPlaying(self: ctre._ctre.Orchestra) -> bool
        
        Returns whether the current track is actively playing or not
        
        :returns: True if playing, false otherwise
        """
        return False

    def loadMusic(self, filePath):  # real signature unknown; restored from __doc__
        """
        loadMusic(self: ctre._ctre.Orchestra, filePath: str) -> ctre._ctre.ErrorCode
        
        Loads a Chirp file at the specified file path.
        
        If the Chirp file is inside your "src/main/deploy" directory
        this file will be automatically deployed to a default directory in
        the RoboRIO when you deploy code. For these files, the name and file
        extension is sufficient.
        
        Use Tuner to create a Chirp file.
        
        :param filepath: The path to the Chirp File.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def pause(self):  # real signature unknown; restored from __doc__
        """
        pause(self: ctre._ctre.Orchestra) -> ctre._ctre.ErrorCode
        
        Pauses the music file that's loaded.
        This saves the current position in the track, so it can be resumed later.
        Pausing while stopped is an invalid request.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def play(self):  # real signature unknown; restored from __doc__
        """
        play(self: ctre._ctre.Orchestra) -> ctre._ctre.ErrorCode
        
        Plays the music file that's loaded.
        If the player is paused, this will resume.
        This will also resume a song if the orchestra was interrupted.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def stop(self):  # real signature unknown; restored from __doc__
        """
        stop(self: ctre._ctre.Orchestra) -> ctre._ctre.ErrorCode
        
        Stops the music file that's loaded.
        This resets the current position in the track to the start.
        
        :returns: Error Code generated by function. 0 indicates no error.
        """
        pass

    def __init__(self):  # real signature unknown; restored from __doc__
        """
        __init__(self: ctre._ctre.Orchestra) -> None
        
        Constructor for an Orchestra Object.
        Call AddInstrument after this to add the instruments.
        """
        pass
